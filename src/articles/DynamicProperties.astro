---
import CardArticle from '../components/CardArticle.astro'
---

<CardArticle>
  <div class='header' slot='header'>
    <span data-tag='badge' id='badge' class='badge'
      >Obtener propiedades CSS con JavaScript</span
    >
  </div>
  <div slot='body'>
    <div class='properties-content-item'>
      <p class='text'>
        Radio de borde: <span data-property='border-radius'></span>
      </p>
      <input type='range' min='0' max='100' value='8' step='4' />
    </div>
    <div>
      <p class='text-description'>
        Utilizamos <code>window.getComputedStyle([element])</code> para obtener todas
        las propiedades CSS de un elemento.
      </p>
      <p class='text-description'>
        Utilizamos <code>.getPropertyValue('color')</code> para obtener el valor
        de esa propiedad.
      </p>
      <p class='text-description'>
        El tipo de medida <code>rem</code> es root-em, significa que va a adaptarse
        a la medida del HTML. Por lo general 1rem es igual a 16px. Va a variar dependiendo
        del tamaño de fuente que tenga el HTML.
      </p>
      <p class='text-description'>
        El tipo de medida <code>em</code> significa que va a adaptarse a la medida
        del elemento padre. Esto es útil para hacer diseños escalables. Para padding,
        margin, width, height, etc, que se adapte al tamaño del texto, que este si
        lo ponemos en rem.
      </p>
    </div>
  </div>
</CardArticle>

<script>
  function getPropertiesOfElement(element: Element, properties: string[]) {
    const tylesOfElement = window.getComputedStyle(element)
    const valuesOfProperties = properties.map((property) => ({
      [property]: tylesOfElement.getPropertyValue(property),
    }))

    return valuesOfProperties
  }

  function printValuesOfProperties(
    properties: {
      element: Element
      property: string
    }[]
  ) {
    properties.forEach(({ element, property }) => {
      element.textContent = property
    })
  }

  const badgeElement = document.querySelector(
    '[data-tag="badge"]'
  ) as HTMLInputElement
  const borderRadiusElement = document.querySelector(
    '[data-property="border-radius"]'
  ) as HTMLInputElement

  const listOfPropertiesToGet = ['border-radius']
  const propertiesOfBadge = getPropertiesOfElement(
    badgeElement,
    listOfPropertiesToGet
  )

  const valueOfBorderRadius = propertiesOfBadge.find(
    (property) => property['border-radius']
  )?.['border-radius']

  printValuesOfProperties([
    { element: borderRadiusElement, property: valueOfBorderRadius ?? '' },
  ])

  const rangeElement = document.querySelector(
    'input[type="range"]'
  ) as HTMLInputElement

  rangeElement.addEventListener('input', ({ target }: Event) => {
    if (target instanceof HTMLInputElement) {
      const value = target.value

      printValuesOfProperties([
        { element: borderRadiusElement, property: `${value}px` },
      ])

      badgeElement.style.borderRadius = `${value}px`
    }
  })
</script>

<style>
  .text-description {
    font-size: var(--text-xs);
    max-width: 48ch;
    text-wrap: pretty;

    & code {
      color: hsla(0, 69%, 69%, 0.881);
    }
  }

  .badge {
    color: light-dark(var(--text-light), var(--text-dark));
    font-size: 1rem;
    padding: 0.5em 2em;
    border-radius: 0.5rem;
    border: 1px solid light-dark(var(--border-light), var(--border-dark));
    transition: background 0.125s ease;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    max-width: 400px;
    text-wrap: pretty;

    &:hover {
      background-color: light-dark(
        var(--dark-transparent),
        var(--white-transparent)
      );
    }

    &::after {
      content: 'Nuevo';
      display: block;
      font-size: 0.85em;
      padding: 0.25em 0.5em;
      border: 1px solid light-dark(var(--border-light), var(--border-dark));
      border-radius: 0.8rem;
    }
  }

  .text {
    font-size: var(--text-sm);
    margin: 0;
  }

  .properties-content-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    padding: 0.5em 1em;

    &:nth-child(2n - 1) {
      background-color: light-dark(
        var(--dark-transparent),
        var(--white-transparent)
      );
    }
  }
</style>
